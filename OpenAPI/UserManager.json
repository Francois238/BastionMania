{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "ef8b3d6edc9a2"
  },
  "info": {
    "title": "Authentification",
    "version": "1.0",
    "description": "Internal API for the management of users"
  },
  "servers": [
    {
      "url": "https://bastionmania.intra/api/user-management",
      "description": "external"
    },
    {
      "url": "http://usermanagement.bastion",
      "description": "internal"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Create New User",
        "operationId": "post-user",
        "responses": {
          "200": {
            "description": "User Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Missing Required Information"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Email Already Taken"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEnroll"
              },
              "examples": {}
            }
          },
          "description": "Post the necessary fields for the API to create a new user."
        },
        "description": "Create a new user.",
        "parameters": []
      },
      "parameters": [],
      "get": {
        "summary": "",
        "operationId": "get-users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Get all users",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mail",
            "description": "renvoyer la liste des users qui match avec le mail (ou debut ou fin du mail)"
          }
        ]
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Id of an existing user."
        }
      ],
      "get": {
        "summary": "Get User Info by User ID",
        "tags": [],
        "responses": {
          "200": {
            "description": "User Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User Not Found"
          }
        },
        "operationId": "get-users-userId",
        "description": "Retrieve the information of the user with the matching user ID."
      },
      "patch": {
        "summary": "Update User Information",
        "operationId": "patch-users-userId",
        "responses": {
          "200": {
            "description": "User Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User Not Found"
          },
          "409": {
            "description": "Email Already Taken"
          }
        },
        "description": "Update the information of an existing user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              },
              "examples": {}
            }
          },
          "description": "Patch user properties to update."
        }
      },
      "delete": {
        "summary": "Delete user",
        "operationId": "delete-users-userId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": ""
      }
    },
    "/users/{userId}/otp": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "",
        "operationId": "post-users-userId-otp",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/extern/users": {
      "post": {
        "summary": "",
        "operationId": "post-extern-users",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Ajouter automatiquement un utilisateur s'il n'existe pas lorsqu'il se connecte avec le SSO",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPostAuthentication"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "examples": [],
        "x-internal": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the given user."
          },
          "name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "mail": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "id",
          "name",
          "last_name",
          "mail"
        ]
      },
      "UserEnroll": {
        "title": "UserEnroll",
        "type": "object",
        "examples": [],
        "x-internal": true,
        "properties": {
          "name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "mail": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "Clear password"
          }
        },
        "required": [
          "name",
          "last_name",
          "mail",
          "password"
        ]
      },
      "UserPostAuthentication": {
        "title": "UserPostAuthentication",
        "x-stoplight": {
          "id": "58yty9e63trvx"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {},
    "requestBodies": {}
  }
}